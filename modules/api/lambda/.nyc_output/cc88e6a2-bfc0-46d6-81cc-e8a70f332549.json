{"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/authentication/index.ts":{"path":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/authentication/index.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":26},"end":{"line":24,"column":52}},"2":{"start":{"line":25,"column":13},"end":{"line":25,"column":31}},"3":{"start":{"line":26,"column":23},"end":{"line":26,"column":52}},"4":{"start":{"line":27,"column":11},"end":{"line":27,"column":26}},"5":{"start":{"line":39,"column":4},"end":{"line":39,"column":49}},"6":{"start":{"line":41,"column":0},"end":{"line":41,"column":26}},"7":{"start":{"line":50,"column":4},"end":{"line":64,"column":5}},"8":{"start":{"line":53,"column":12},"end":{"line":53,"column":35}},"9":{"start":{"line":54,"column":12},"end":{"line":54,"column":44}},"10":{"start":{"line":55,"column":12},"end":{"line":55,"column":23}},"11":{"start":{"line":58,"column":12},"end":{"line":58,"column":48}},"12":{"start":{"line":59,"column":12},"end":{"line":59,"column":59}},"13":{"start":{"line":60,"column":12},"end":{"line":60,"column":23}},"14":{"start":{"line":63,"column":12},"end":{"line":63,"column":23}},"15":{"start":{"line":66,"column":0},"end":{"line":66,"column":30}},"16":{"start":{"line":80,"column":8},"end":{"line":80,"column":16}},"17":{"start":{"line":81,"column":8},"end":{"line":81,"column":41}},"18":{"start":{"line":92,"column":25},"end":{"line":92,"column":31}},"19":{"start":{"line":94,"column":8},"end":{"line":95,"column":53}},"20":{"start":{"line":95,"column":12},"end":{"line":95,"column":53}},"21":{"start":{"line":97,"column":8},"end":{"line":107,"column":21}},"22":{"start":{"line":109,"column":8},"end":{"line":109,"column":61}},"23":{"start":{"line":120,"column":8},"end":{"line":150,"column":9}},"24":{"start":{"line":121,"column":60},"end":{"line":128,"column":24}},"25":{"start":{"line":130,"column":12},"end":{"line":131,"column":88}},"26":{"start":{"line":131,"column":16},"end":{"line":131,"column":88}},"27":{"start":{"line":132,"column":12},"end":{"line":145,"column":14}},"28":{"start":{"line":149,"column":12},"end":{"line":149,"column":33}},"29":{"start":{"line":160,"column":8},"end":{"line":185,"column":9}},"30":{"start":{"line":161,"column":60},"end":{"line":167,"column":24}},"31":{"start":{"line":169,"column":12},"end":{"line":170,"column":88}},"32":{"start":{"line":170,"column":16},"end":{"line":170,"column":88}},"33":{"start":{"line":171,"column":12},"end":{"line":180,"column":14}},"34":{"start":{"line":184,"column":12},"end":{"line":184,"column":33}},"35":{"start":{"line":195,"column":33},"end":{"line":198,"column":20}},"36":{"start":{"line":200,"column":8},"end":{"line":200,"column":52}},"37":{"start":{"line":203,"column":0},"end":{"line":203,"column":52}}},"fnMap":{"0":{"name":"expires","decl":{"start":{"line":38,"column":9},"end":{"line":38,"column":16}},"loc":{"start":{"line":38,"column":26},"end":{"line":40,"column":1}},"line":38},"1":{"name":"translate","decl":{"start":{"line":49,"column":9},"end":{"line":49,"column":18}},"loc":{"start":{"line":49,"column":24},"end":{"line":65,"column":1}},"line":49},"2":{"name":"(anonymous_2)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":66},"end":{"line":82,"column":5}},"line":79},"3":{"name":"(anonymous_3)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":36},"end":{"line":110,"column":5}},"line":91},"4":{"name":"(anonymous_4)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":58},"end":{"line":151,"column":5}},"line":119},"5":{"name":"(anonymous_5)","decl":{"start":{"line":159,"column":4},"end":{"line":159,"column":5}},"loc":{"start":{"line":159,"column":39},"end":{"line":186,"column":5}},"line":159},"6":{"name":"(anonymous_6)","decl":{"start":{"line":194,"column":4},"end":{"line":194,"column":5}},"loc":{"start":{"line":194,"column":35},"end":{"line":201,"column":5}},"line":194}},"branchMap":{"0":{"loc":{"start":{"line":50,"column":4},"end":{"line":64,"column":5}},"type":"switch","locations":[{"start":{"line":52,"column":8},"end":{"line":55,"column":23}},{"start":{"line":57,"column":8},"end":{"line":60,"column":23}},{"start":{"line":62,"column":8},"end":{"line":63,"column":23}}],"line":50},"1":{"loc":{"start":{"line":79,"column":16},"end":{"line":79,"column":64}},"type":"default-arg","locations":[{"start":{"line":79,"column":31},"end":{"line":79,"column":64}}],"line":79},"2":{"loc":{"start":{"line":94,"column":8},"end":{"line":95,"column":53}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":95,"column":53}},{"start":{"line":94,"column":8},"end":{"line":95,"column":53}}],"line":94},"3":{"loc":{"start":{"line":130,"column":12},"end":{"line":131,"column":88}},"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":131,"column":88}},{"start":{"line":130,"column":12},"end":{"line":131,"column":88}}],"line":130},"4":{"loc":{"start":{"line":169,"column":12},"end":{"line":170,"column":88}},"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":170,"column":88}},{"start":{"line":169,"column":12},"end":{"line":170,"column":88}}],"line":169}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"0":[0,0,0],"1":[0],"2":[0,0],"3":[0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/authentication/index.ts","sources":["/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/authentication/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2018-2019 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { AWSError } from \"aws-sdk\"\nimport { validate } from \"email-validator\"\nimport * as uuid from \"uuid/v4\"\n\nimport { Session } from \"../../common\"\nimport {\n  Verification,\n  VerificationCode\n} from \"../../verification\"\nimport { Client } from \"../_\"\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Create a date for a specific time in the future\n *\n * @param seconds - Validity in seconds\n *\n * @return Expiry date\n */\nexport function expires(seconds: number): Date {\n  return new Date(Date.now() + seconds * 1000)\n}\n\n/**\n * Translate/map error code and message for some errors\n *\n * @param err - Error\n *\n * @return Mapped error\n */\nexport function translate(err: AWSError): AWSError {\n  switch (err.code) {\n\n    /* Empty username and password */\n    case \"InvalidParameterException\":\n      err.code    = \"TypeError\"\n      err.message = \"Invalid request\"\n      return err\n\n    /* Obfuscate non-existent user error for authentication */\n    case \"UserNotFoundException\":\n      err.code    = \"NotAuthorizedException\"\n      err.message = \"Incorrect username or password\"\n      return err\n\n    /* Pass-through all other errors */\n    default:\n      return err\n  }\n}\n\n/* ----------------------------------------------------------------------------\n * Class\n * ------------------------------------------------------------------------- */\n\n/**\n * Authentication client\n */\nexport class AuthenticationClient extends Client {\n\n  /**\n   * Initialize verification provider\n   *\n   * @param verification - Verification provider\n   */\n  public constructor(\n    protected verification = new Verification()\n  ) {\n    super()\n  }\n\n  /**\n   * Register user with email address and password\n   *\n   * @param email - Email address\n   * @param password Password\n   *\n   * @return Promise resolving with verification code\n   */\n  public async register(\n    email: string, password: string\n  ): Promise<VerificationCode> {\n    const username = uuid()\n\n    /* Check if email address is valid */\n    if (!validate(email))\n      throw new Error(\"Invalid email address\")\n\n    /* Register user with Cognito */\n    await this.cognito.signUp({\n      ClientId: process.env.COGNITO_USER_POOL_CLIENT_ID!,\n      Username: username,\n      Password: password,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: email\n        }\n      ]\n    }).promise()\n\n    /* Issue and return verification code */\n    return this.verification.issue(\"register\", username)\n  }\n\n  /**\n   * Authenticate using username or email and password\n   *\n   * @param username - Username or email address\n   * @param password - Password\n   *\n   * @return Promise resolving with session\n   */\n  public async authenticateWithCredentials(\n    username: string, password: string\n  ): Promise<Session> {\n    try {\n      const { AuthenticationResult, ChallengeName } =\n        await this.cognito.initiateAuth({\n          ClientId: process.env.COGNITO_USER_POOL_CLIENT_ID!,\n          AuthFlow: \"USER_PASSWORD_AUTH\",\n          AuthParameters: {\n            USERNAME: username,\n            PASSWORD: password\n          }\n        }).promise()\n\n      /* Return session if authenticated */\n      if (!AuthenticationResult)\n        throw new Error(`Invalid authentication: challenge \"${ChallengeName}\"`)\n      return {\n        id: {\n          token: AuthenticationResult.IdToken!,\n          expires: expires(60 * 60) /* 1 hour */\n        },\n        access: {\n          token: AuthenticationResult.AccessToken!,\n          expires: expires(60 * 60) /* 1 hour */\n        },\n        refresh: {\n          token: AuthenticationResult.RefreshToken!,\n          expires: expires(60 * 60 * 24 * 30) /* 30 days */\n        }\n      }\n\n    /* Obfuscate errors */\n    } catch (err) {\n      throw translate(err)\n    }\n  }\n\n  /**\n   * Re-authenticate using refresh token\n   *\n   * @param token - Refresh token\n   *\n   * @return Promise resolving with session\n   */\n  public async authenticateWithToken(\n    token: string\n  ): Promise<Session> {\n    try {\n      const { AuthenticationResult, ChallengeName } =\n        await this.cognito.initiateAuth({\n          ClientId: process.env.COGNITO_USER_POOL_CLIENT_ID!,\n          AuthFlow: \"REFRESH_TOKEN\",\n          AuthParameters: {\n            REFRESH_TOKEN: token\n          }\n        }).promise()\n\n      /* Return renewed session if authenticated */\n      if (!AuthenticationResult)\n        throw new Error(`Invalid authentication: challenge \"${ChallengeName}\"`)\n      return {\n        id: {\n          token: AuthenticationResult.IdToken!,\n          expires: expires(60 * 60) /* 1 hour */\n        },\n        access: {\n          token: AuthenticationResult.AccessToken!,\n          expires: expires(60 * 60) /* 1 hour */\n        }\n      }\n\n    /* Obfuscate errors */\n    } catch (err) {\n      throw translate(err)\n    }\n  }\n\n  /**\n   * Trigger authentication flow for password reset\n   *\n   * @param username - Username or email address\n   *\n   * @return Promise resolving with verification code\n   */\n  public async forgotPassword(username: string): Promise<VerificationCode> {\n    const { Username: id } = await this.cognito.adminGetUser({\n      UserPoolId: process.env.COGNITO_USER_POOL_ID!,\n      Username: username\n    }).promise()\n\n    /* Issue and return verification code */\n    return this.verification.issue(\"reset\", id)\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4c40cf3863c7fac3061cb4d00488bd295540e67f","contentHash":"ae6b58e40b90a5ba4dbc9116e503cfb9fabefed384ee164dd2ec824f1b0b4f72"},"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/verification/index.ts":{"path":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/verification/index.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":18},"end":{"line":24,"column":36}},"2":{"start":{"line":25,"column":17},"end":{"line":25,"column":34}},"3":{"start":{"line":26,"column":15},"end":{"line":26,"column":30}},"4":{"start":{"line":45,"column":8},"end":{"line":45,"column":33}},"5":{"start":{"line":46,"column":8},"end":{"line":46,"column":23}},"6":{"start":{"line":65,"column":21},"end":{"line":70,"column":9}},"7":{"start":{"line":72,"column":8},"end":{"line":83,"column":11}},"8":{"start":{"line":85,"column":8},"end":{"line":85,"column":20}},"9":{"start":{"line":99,"column":31},"end":{"line":103,"column":20}},"10":{"start":{"line":105,"column":21},"end":{"line":105,"column":31}},"11":{"start":{"line":106,"column":8},"end":{"line":107,"column":57}},"12":{"start":{"line":107,"column":12},"end":{"line":107,"column":57}},"13":{"start":{"line":109,"column":8},"end":{"line":109,"column":20}},"14":{"start":{"line":112,"column":0},"end":{"line":112,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":44,"column":63},"end":{"line":47,"column":5}},"line":44},"1":{"name":"(anonymous_1)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":34},"end":{"line":86,"column":5}},"line":64},"2":{"name":"(anonymous_2)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":29},"end":{"line":110,"column":5}},"line":98}},"branchMap":{"0":{"loc":{"start":{"line":42,"column":16},"end":{"line":44,"column":6}},"type":"default-arg","locations":[{"start":{"line":42,"column":27},"end":{"line":44,"column":6}}],"line":42},"1":{"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":61}},"type":"default-arg","locations":[{"start":{"line":44,"column":14},"end":{"line":44,"column":61}}],"line":44},"2":{"loc":{"start":{"line":106,"column":8},"end":{"line":107,"column":57}},"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":107,"column":57}},{"start":{"line":106,"column":8},"end":{"line":107,"column":57}}],"line":106},"3":{"loc":{"start":{"line":106,"column":12},"end":{"line":106,"column":45}},"type":"binary-expr","locations":[{"start":{"line":106,"column":12},"end":{"line":106,"column":17}},{"start":{"line":106,"column":21},"end":{"line":106,"column":45}}],"line":106}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"f":{"0":0,"1":0,"2":0},"b":{"0":[0],"1":[0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/verification/index.ts","sources":["/projects/terraform-aws-cognito-auth/modules/api/lambda/src/verification/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAEH,qCAAuC;AACvC,mCAAoC;AACpC,+BAAgC;AAqBhC;;+EAE+E;AAE/E;;;;GAIG;AACH,MAAa,YAAY;IAEvB;;;;;OAKG;IACH,YACY,WAAW,IAAI,kBAAQ,CAAC,cAAc,CAAC;QAC/C,UAAU,EAAE,YAAY;KACzB,CAAC,EACQ,MAAM,IAAI,aAAG,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;QAH3C,aAAQ,GAAR,QAAQ,CAEhB;QACQ,QAAG,GAAH,GAAG,CAAwC;IACpD,CAAC;IAEJ;;;;;;;;;;;;;;;OAeG;IACI,KAAK,CAAC,KAAK,CAChB,OAA4B,EAAE,OAAe;QAE7C,MAAM,IAAI,GAAqB;YAC7B,EAAE,EAAE,CAAC,MAAM,gBAAS,CAAC,oBAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;YACtD,OAAO;YACP,OAAO;YACP,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;SACtD,CAAA;QAED,4BAA4B;QAC5B,MAAM,OAAO,CAAC,GAAG,CAAC;YAEhB,4BAA4B;YAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAChB,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,cAAe;gBACtC,IAAI,EAAE,IAAI;aACX,CAAC,CAAC,OAAO,EAAE;YAEZ,+BAA+B;YAC/B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;gBACf,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,aAAc;gBACpC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC9B,CAAC,CAAC,OAAO,EAAE;SACb,CAAC,CAAA;QAEF,8BAA8B;QAC9B,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;;;;;;OAUG;IACI,KAAK,CAAC,KAAK,CAChB,OAA4B,EAAE,EAAU;QAExC,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAChD,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,cAAe;YACtC,GAAG,EAAE,EAAE,EAAE,EAAE;YACX,YAAY,EAAE,SAAS;SACxB,CAAC,CAAC,OAAO,EAAE,CAAA;QAEZ,iEAAiE;QACjE,MAAM,IAAI,GAAG,UAA8B,CAAA;QAC3C,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO;YACnC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;QAE9C,8BAA8B;QAC9B,OAAO,IAAI,CAAA;IACb,CAAC;CACF;AAzFD,oCAyFC","sourcesContent":["/*\n * Copyright (c) 2018-2019 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { DynamoDB, SNS } from \"aws-sdk\"\nimport { randomBytes } from \"crypto\"\nimport { promisify } from \"util\"\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Verification context\n */\nexport type VerificationContext = \"register\" | \"reset\"\n\n/**\n * Verification code\n */\nexport interface VerificationCode {\n  id: string                           /* Verification code */\n  context: VerificationContext         /* Verification context */\n  subject: string                      /* Verification subject */\n  expires: number                      /* Verification code validity */\n}\n\n/* ----------------------------------------------------------------------------\n * Class\n * ------------------------------------------------------------------------- */\n\n/**\n * Verification provider\n *\n * @internal\n */\nexport class Verification {\n\n  /**\n   * Initialize DynamoDB and SNS clients\n   *\n   * @param dynamodb - DynamoDB client\n   * @param sns - SNS client\n   */\n  public constructor(\n    protected dynamodb = new DynamoDB.DocumentClient({\n      apiVersion: \"2012-08-10\"\n    }),\n    protected sns = new SNS({ apiVersion: \"2010-03-31\" })\n  ) {}\n\n  /**\n   * Issue a verification code for the given subject\n   *\n   * A code expires 24 hours after creation which is automatically handled by\n   * DynamoDB in the background. However, DynamoDB doesn't guarantee that items\n   * are deleted the moment they expire which means they will still show up in\n   * queries and scans, but we simply don't care if this is the case.\n   *\n   * Additionally the verification code is published to the configured SNS\n   * topic to enable fully customizable delivery.\n   *\n   * @param context - Verification context\n   * @param subject - Verification subject\n   *\n   * @return Promise resolving with verification code\n   */\n  public async issue(\n    context: VerificationContext, subject: string\n  ): Promise<VerificationCode> {\n    const code: VerificationCode = {\n      id: (await promisify(randomBytes)(16)).toString(\"hex\"),\n      context,\n      subject,\n      expires: Math.floor(Date.now() / 1000) + 60 * 60 * 24\n    }\n\n    /* Store and publish code */\n    await Promise.all([\n\n      /* Store code in DynamoDB */\n      this.dynamodb.put({\n        TableName: process.env.DYNAMODB_TABLE!,\n        Item: code\n      }).promise(),\n\n      /* Publish code on SNS topic */\n      this.sns.publish({\n        TopicArn: process.env.SNS_TOPIC_ARN!,\n        Message: JSON.stringify(code)\n      }).promise()\n    ])\n\n    /* Return verification code */\n    return code\n  }\n\n  /**\n   * Claim a verification code\n   *\n   * The code is claimed and immediately deleted from the DynamoDB table if it\n   * exists to ensure that every verification code is only used once.\n   *\n   * @param context - Verification context\n   * @param id - Verification code identifier\n   *\n   * @return Promise resolving with verification code\n   */\n  public async claim(\n    context: VerificationContext, id: string\n  ): Promise<VerificationCode> {\n    const { Attributes } = await this.dynamodb.delete({\n      TableName: process.env.DYNAMODB_TABLE!,\n      Key: { id },\n      ReturnValues: \"ALL_OLD\"\n    }).promise()\n\n    /* Return verification code or throw error if it did not exist */\n    const code = Attributes as VerificationCode\n    if (!code || code.context !== context)\n      throw new Error(`Invalid verification code`)\n\n    /* Return verification code */\n    return code\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"41bfd5f94ad0c1e3055e1283e14f65be77aa82ce","contentHash":"b09da3a52e685a2e1cbaa52680df9c5a72fe2905a0de43dbc571a1b7b4e20934"},"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/_/index.ts":{"path":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/_/index.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":18},"end":{"line":24,"column":36}},"2":{"start":{"line":40,"column":8},"end":{"line":40,"column":31}},"3":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":5}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":37,"column":16},"end":{"line":39,"column":6}},"type":"default-arg","locations":[{"start":{"line":37,"column":26},"end":{"line":39,"column":6}}],"line":37}},"s":{"0":1,"1":1,"2":0,"3":1},"f":{"0":0},"b":{"0":[0]},"inputSourceMap":{"version":3,"file":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/_/index.ts","sources":["/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/_/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAEH,qCAAwD;AAExD;;+EAE+E;AAE/E;;GAEG;AACH,MAAsB,MAAM;IAE1B;;;;OAIG;IACH,YACY,UAAU,IAAI,wCAA8B,CAAC;QACrD,UAAU,EAAE,YAAY;KACzB,CAAC;QAFQ,YAAO,GAAP,OAAO,CAEf;IACD,CAAC;CACL;AAZD,wBAYC","sourcesContent":["/*\n * Copyright (c) 2018-2019 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { CognitoIdentityServiceProvider } from \"aws-sdk\"\n\n/* ----------------------------------------------------------------------------\n * Class\n * ------------------------------------------------------------------------- */\n\n/**\n * Abstract client base class\n */\nexport abstract class Client {\n\n  /**\n   * Initialize client\n   *\n   * @param cognito - Cognito client\n   */\n  public constructor(\n    protected cognito = new CognitoIdentityServiceProvider({\n      apiVersion: \"2016-04-18\"\n    })\n  ) {}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0b9eb922976337e614b114d5e77252205a339e97","contentHash":"0f66e4a4e266b8c02edd5c63f61797bbf57d7110012455ac5a3898a935972cfc"},"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/management/index.ts":{"path":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/management/index.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":11},"end":{"line":24,"column":26}},"2":{"start":{"line":40,"column":8},"end":{"line":57,"column":11}},"3":{"start":{"line":67,"column":8},"end":{"line":70,"column":21}},"4":{"start":{"line":89,"column":49},"end":{"line":92,"column":20}},"5":{"start":{"line":94,"column":8},"end":{"line":94,"column":34}},"6":{"start":{"line":96,"column":8},"end":{"line":103,"column":21}},"7":{"start":{"line":101,"column":16},"end":{"line":101,"column":75}},"8":{"start":{"line":105,"column":8},"end":{"line":105,"column":34}},"9":{"start":{"line":108,"column":0},"end":{"line":108,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":31},"end":{"line":58,"column":5}},"line":39},"1":{"name":"(anonymous_1)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":31},"end":{"line":71,"column":5}},"line":66},"2":{"name":"(anonymous_2)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":45},"end":{"line":106,"column":5}},"line":88},"3":{"name":"(anonymous_3)","decl":{"start":{"line":100,"column":50},"end":{"line":100,"column":51}},"loc":{"start":{"line":100,"column":58},"end":{"line":102,"column":13}},"line":100}},"branchMap":{},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"f":{"0":0,"1":0,"2":0,"3":0},"b":{},"inputSourceMap":{"version":3,"file":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/management/index.ts","sources":["/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/management/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAEH,2BAA6B;AAE7B;;+EAE+E;AAE/E;;GAEG;AACH,MAAa,gBAAiB,SAAQ,SAAM;IAE1C;;;;;;OAMG;IACI,KAAK,CAAC,UAAU,CAAC,QAAgB;QACtC,MAAM,OAAO,CAAC,GAAG,CAAC;YAEhB,+BAA+B;YAC/B,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;gBAC9B,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAqB;gBAC7C,QAAQ,EAAE,QAAQ;aACnB,CAAC,CAAC,OAAO,EAAE;YAEZ,0BAA0B;YAC1B,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC;gBACrC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAqB;gBAC7C,QAAQ,EAAE,QAAQ;gBAClB,cAAc,EAAE;oBACd;wBACE,IAAI,EAAE,gBAAgB;wBACtB,KAAK,EAAE,MAAM;qBACd;iBACF;aACF,CAAC,CAAC,OAAO,EAAE;SACb,CAAC,CAAA;IACJ,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,UAAU,CAAC,QAAgB;QACtC,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;YACjC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAqB;YAC7C,QAAQ,EAAE,QAAQ;SACnB,CAAC,CAAC,OAAO,EAAE,CAAA;IACd,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACI,KAAK,CAAC,cAAc,CACzB,QAAgB,EAAE,QAAgB;QAElC,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,cAAc,EAAE,GACpC,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YAC9B,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAqB;YAC7C,QAAQ,EAAE,QAAQ;SACnB,CAAC,CAAC,OAAO,EAAE,CAAA;QAEd,iBAAiB;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;QAEzB,oBAAoB;QACpB,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACxB,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,2BAA4B;YAClD,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,QAAQ;YAClB,cAAc,EAAE,cAAe,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBAC5C,OAAO,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;YAC5D,CAAC,CAAC;SACH,CAAC,CAAC,OAAO,EAAE,CAAA;QAEZ,sBAAsB;QACtB,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;CACF;AAvFD,4CAuFC","sourcesContent":["/*\n * Copyright (c) 2018-2019 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { Client } from \"../_\"\n\n/* ----------------------------------------------------------------------------\n * Class\n * ------------------------------------------------------------------------- */\n\n/**\n * Management client\n */\nexport class ManagementClient extends Client {\n\n  /**\n   * Complete user registration by verification\n   *\n   * @param username - Username or email address\n   *\n   * @return Promise resolving with no result\n   */\n  public async verifyUser(username: string): Promise<void> {\n    await Promise.all([\n\n      /* Confirm user registration */\n      this.cognito.adminConfirmSignUp({\n        UserPoolId: process.env.COGNITO_USER_POOL_ID!,\n        Username: username\n      }).promise(),\n\n      /* Verify email address */\n      this.cognito.adminUpdateUserAttributes({\n        UserPoolId: process.env.COGNITO_USER_POOL_ID!,\n        Username: username,\n        UserAttributes: [\n          {\n            Name: \"email_verified\",\n            Value: \"true\"\n          }\n        ]\n      }).promise()\n    ])\n  }\n\n  /**\n   * Delete user\n   *\n   * @param username - Username or email address\n   *\n   * @return Promise resolving with no result\n   */\n  public async deleteUser(username: string): Promise<void> {\n    await this.cognito.adminDeleteUser({\n      UserPoolId: process.env.COGNITO_USER_POOL_ID!,\n      Username: username\n    }).promise()\n  }\n\n  /**\n   * Reset password for user\n   *\n   * Hack: Cognito doesn't allow us to change the password of a user without\n   * his consent, so we have to work around this in order to implement our own\n   * customized authentication flow by deleting and re-creating the user.\n   * Hopefully, this issue will be adressed, see https://amzn.to/2snEPMm\n   *\n   * We must sign out the user to force re-authentication, but we don't need to\n   * do it explicitly as we delete the old and create a new user.\n   *\n   * @param username - Username or email address\n   * @param password - Password\n   *\n   * @return Promise resolving with no result\n   */\n  public async changePassword(\n    username: string, password: string\n  ): Promise<void> {\n    const { Username: id, UserAttributes } =\n      await this.cognito.adminGetUser({\n        UserPoolId: process.env.COGNITO_USER_POOL_ID!,\n        Username: username\n      }).promise()\n\n    /* Delete user */\n    await this.deleteUser(id)\n\n    /* Re-create user */\n    await this.cognito.signUp({\n      ClientId: process.env.COGNITO_USER_POOL_CLIENT_ID!,\n      Username: id,\n      Password: password,\n      UserAttributes: UserAttributes!.filter(attr => {\n        return [\"sub\", \"email_verified\"].indexOf(attr.Name) === -1\n      })\n    }).promise()\n\n    /* Auto-verify user */\n    await this.verifyUser(id)\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8ac98628e7f9b111c2e1bb1e840ceba5023d29ac","contentHash":"d43eaba74b489583fb212df5dc0d7475755afb999a0a47e5e3025e6daca95838"},"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/session/index.ts":{"path":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/session/index.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":11},"end":{"line":24,"column":26}},"2":{"start":{"line":38,"column":8},"end":{"line":38,"column":16}},"3":{"start":{"line":39,"column":8},"end":{"line":39,"column":27}},"4":{"start":{"line":45,"column":8},"end":{"line":47,"column":21}},"5":{"start":{"line":50,"column":0},"end":{"line":50,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":23},"end":{"line":40,"column":5}},"line":37},"1":{"name":"(anonymous_1)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":20},"end":{"line":48,"column":5}},"line":44}},"branchMap":{},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":1},"f":{"0":0,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/session/index.ts","sources":["/projects/terraform-aws-cognito-auth/modules/api/lambda/src/clients/session/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAEH,2BAA6B;AAE7B;;+EAE+E;AAE/E;;GAEG;AACH,MAAa,aAAc,SAAQ,SAAM;IAEvC;;;;OAIG;IACH,YACY,KAAa;QAEvB,KAAK,EAAE,CAAA;QAFG,UAAK,GAAL,KAAK,CAAQ;IAGzB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;YAC/B,WAAW,EAAE,IAAI,CAAC,KAAK;SACxB,CAAC,CAAC,OAAO,EAAE,CAAA;IACd,CAAC;CACF;AArBD,sCAqBC","sourcesContent":["/*\n * Copyright (c) 2018-2019 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport { Client } from \"../_\"\n\n/* ----------------------------------------------------------------------------\n * Class\n * ------------------------------------------------------------------------- */\n\n/**\n * Session client\n */\nexport class SessionClient extends Client {\n\n  /**\n   * Initialize session client\n   *\n   * @param token - Access token\n   */\n  public constructor(\n    protected token: string\n  ) {\n    super()\n  }\n\n  /**\n   * Terminate session for current user\n   */\n  public async signOut() {\n    await this.cognito.globalSignOut({\n      AccessToken: this.token\n    }).promise()\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"298fe0061651178e24a504e28cdbac63b953d210","contentHash":"87942d8a428e05bb1ca1236df866ba50d5d2ab3aa3b8eb95ef693100b73bcd4e"},"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/handlers/_/index.ts":{"path":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/handlers/_/index.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":21},"end":{"line":24,"column":42}},"2":{"start":{"line":36,"column":4},"end":{"line":50,"column":5}},"3":{"start":{"line":39,"column":12},"end":{"line":39,"column":35}},"4":{"start":{"line":40,"column":12},"end":{"line":40,"column":44}},"5":{"start":{"line":41,"column":12},"end":{"line":41,"column":23}},"6":{"start":{"line":44,"column":12},"end":{"line":44,"column":46}},"7":{"start":{"line":45,"column":12},"end":{"line":45,"column":82}},"8":{"start":{"line":46,"column":12},"end":{"line":46,"column":23}},"9":{"start":{"line":49,"column":12},"end":{"line":49,"column":23}},"10":{"start":{"line":52,"column":0},"end":{"line":52,"column":30}},"11":{"start":{"line":66,"column":4},"end":{"line":101,"column":6}},"12":{"start":{"line":67,"column":8},"end":{"line":100,"column":9}},"13":{"start":{"line":68,"column":25},"end":{"line":70,"column":20}},"14":{"start":{"line":72,"column":27},"end":{"line":72,"column":62}},"15":{"start":{"line":73,"column":12},"end":{"line":74,"column":55}},"16":{"start":{"line":74,"column":16},"end":{"line":74,"column":55}},"17":{"start":{"line":76,"column":50},"end":{"line":81,"column":16}},"18":{"start":{"line":82,"column":12},"end":{"line":86,"column":14}},"19":{"start":{"line":90,"column":12},"end":{"line":90,"column":44}},"20":{"start":{"line":91,"column":12},"end":{"line":91,"column":33}},"21":{"start":{"line":92,"column":12},"end":{"line":99,"column":14}},"22":{"start":{"line":103,"column":0},"end":{"line":103,"column":26}}},"fnMap":{"0":{"name":"translate","decl":{"start":{"line":35,"column":9},"end":{"line":35,"column":18}},"loc":{"start":{"line":35,"column":24},"end":{"line":51,"column":1}},"line":35},"1":{"name":"handler","decl":{"start":{"line":65,"column":9},"end":{"line":65,"column":16}},"loc":{"start":{"line":65,"column":29},"end":{"line":102,"column":1}},"line":65},"2":{"name":"(anonymous_2)","decl":{"start":{"line":66,"column":11},"end":{"line":66,"column":12}},"loc":{"start":{"line":66,"column":28},"end":{"line":101,"column":5}},"line":66}},"branchMap":{"0":{"loc":{"start":{"line":36,"column":4},"end":{"line":50,"column":5}},"type":"switch","locations":[{"start":{"line":38,"column":8},"end":{"line":41,"column":23}},{"start":{"line":43,"column":8},"end":{"line":46,"column":23}},{"start":{"line":48,"column":8},"end":{"line":49,"column":23}}],"line":36},"1":{"loc":{"start":{"line":68,"column":25},"end":{"line":70,"column":20}},"type":"cond-expr","locations":[{"start":{"line":69,"column":18},"end":{"line":69,"column":48}},{"start":{"line":70,"column":18},"end":{"line":70,"column":20}}],"line":68},"2":{"loc":{"start":{"line":69,"column":29},"end":{"line":69,"column":47}},"type":"binary-expr","locations":[{"start":{"line":69,"column":29},"end":{"line":69,"column":39}},{"start":{"line":69,"column":43},"end":{"line":69,"column":47}}],"line":69},"3":{"loc":{"start":{"line":73,"column":12},"end":{"line":74,"column":55}},"type":"if","locations":[{"start":{"line":73,"column":12},"end":{"line":74,"column":55}},{"start":{"line":73,"column":12},"end":{"line":74,"column":55}}],"line":73},"4":{"loc":{"start":{"line":83,"column":28},"end":{"line":83,"column":60}},"type":"binary-expr","locations":[{"start":{"line":83,"column":28},"end":{"line":83,"column":38}},{"start":{"line":83,"column":43},"end":{"line":83,"column":59}}],"line":83},"5":{"loc":{"start":{"line":83,"column":43},"end":{"line":83,"column":59}},"type":"cond-expr","locations":[{"start":{"line":83,"column":50},"end":{"line":83,"column":53}},{"start":{"line":83,"column":56},"end":{"line":83,"column":59}}],"line":83},"6":{"loc":{"start":{"line":85,"column":22},"end":{"line":85,"column":54}},"type":"cond-expr","locations":[{"start":{"line":85,"column":29},"end":{"line":85,"column":49}},{"start":{"line":85,"column":52},"end":{"line":85,"column":54}}],"line":85},"7":{"loc":{"start":{"line":90,"column":23},"end":{"line":90,"column":43}},"type":"binary-expr","locations":[{"start":{"line":90,"column":23},"end":{"line":90,"column":31}},{"start":{"line":90,"column":35},"end":{"line":90,"column":43}}],"line":90},"8":{"loc":{"start":{"line":93,"column":28},"end":{"line":93,"column":49}},"type":"binary-expr","locations":[{"start":{"line":93,"column":28},"end":{"line":93,"column":42}},{"start":{"line":93,"column":46},"end":{"line":93,"column":49}}],"line":93}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"file":"/projects/terraform-aws-cognito-auth/modules/api/lambda/src/handlers/_/index.ts","sources":["/projects/terraform-aws-cognito-auth/modules/api/lambda/src/handlers/_/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAOH,2CAAqC;AAkDrC;;+EAE+E;AAE/E;;;;;;GAMG;AACH,SAAgB,SAAS,CAAC,GAAa;IACrC,QAAQ,GAAG,CAAC,IAAI,EAAE;QAEhB,yBAAyB;QACzB,KAAK,aAAa;YAChB,GAAG,CAAC,IAAI,GAAG,WAAW,CAAA;YACtB,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAA;YAC/B,OAAO,GAAG,CAAA;QAEZ,mCAAmC;QACnC,KAAK,+BAA+B;YAClC,GAAG,CAAC,IAAI,GAAG,sBAAsB,CAAA;YACjC,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAA;YACrE,OAAO,GAAG,CAAA;QAEZ,mCAAmC;QACnC;YACE,OAAO,GAAG,CAAA;KACb;AACH,CAAC;AAnBD,8BAmBC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,OAAO,CAErB,MAAc,EAAE,EAAmD;IACnE,OAAO,KAAK,EAAE,KAA2B,EACR,EAAE;QACjC,IAAI;YACF,MAAM,IAAI,GAAW,KAAK,CAAC,UAAU,KAAK,MAAM;gBAC9C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC;gBAChC,CAAC,CAAC,EAAE,CAAA;YAEN,yCAAyC;YACzC,MAAM,MAAM,GAAG,qBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YACrC,IAAI,CAAC,MAAM,CAAC,KAAK;gBACf,MAAM,IAAI,SAAS,CAAC,iBAAiB,CAAC,CAAA;YAExC,yCAAyC;YACzC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,mBACjC,UAAU,EAAE,SAAS,EACrB,OAAO,EAAE,EAAE,EACX,IAAI,EAAE,SAAS,IACZ,CAAC,MAAM,EAAE,CAAC;gBACX,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,cAAc,EAAE,KAAK,CAAC,cAA6B;gBACnD,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,IAAI,EAAE,IAAI;aACX,CAAC,CAAC,CACJ,CAAA;YACD,OAAO;gBACL,UAAU,EAAE,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC5C,OAAO,kCAAO,OAAO,KAAE,6BAA6B,EAAE,GAAG,GAAE;gBAC3D,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;aACvC,CAAA;YAED,kBAAkB;SACnB;QAAC,OAAO,GAAG,EAAE;YACZ,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAA;YAC/B,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;YACpB,OAAO;gBACL,UAAU,EAAE,GAAG,CAAC,UAAU,IAAI,GAAG;gBACjC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;iBACxC,CAAC;gBACF,OAAO,EAAE,EAAE,6BAA6B,EAAE,GAAG,EAAE;aAChD,CAAA;SACF;IACH,CAAC,CAAA;AACH,CAAC;AA/CD,0BA+CC","sourcesContent":["/*\n * Copyright (c) 2018-2019 Martin Donath <martin.donath@squidfunk.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\nimport {\n  APIGatewayProxyEvent,\n  APIGatewayProxyResult\n} from \"aws-lambda\"\nimport { AWSError } from \"aws-sdk\"\nimport { validate } from \"jsonschema\"\n\nimport { ErrorResponse } from \"../../common\"\n\n/* ----------------------------------------------------------------------------\n * Types\n * ------------------------------------------------------------------------- */\n\n/**\n * Handler callback event\n *\n * @template TParameters - Callback event path parameter type\n * @template TEvent - Callback event body type\n */\nexport interface HandlerCallbackEvent<\n  TParameters extends {}, TEvent extends {}\n  > {\n  path: string                         /* Event path */\n  pathParameters: TParameters          /* Event path parameters */\n  headers: {                           /* Event headers */\n    [name: string]: string\n  }\n  body: TEvent                         /* Event body */\n}\n\n/**\n * Handler callback response\n *\n * @template TResponse - Callback response body type\n */\nexport interface HandlerCallbackResponse<TResponse> {\n  statusCode?: number                  /* Response status code */\n  headers?: {                          /* Response headers */\n    [name: string]: string\n  }\n  body?: TResponse | ErrorResponse     /* Response body */\n}\n\n/**\n * Handler callback\n *\n * @template TParameters - Callback event path parameter type\n * @template TEvent - Callback event body type\n * @template TResponse - Callback response body type\n */\nexport type HandlerCallback<\n  TParameters extends {}, TEvent extends {}, TResponse = void\n  > = (event: HandlerCallbackEvent<TParameters, TEvent>) =>\n    Promise<HandlerCallbackResponse<TResponse> | void>\n\n/* ----------------------------------------------------------------------------\n * Functions\n * ------------------------------------------------------------------------- */\n\n/**\n * Translate/map error code and message for some errors\n *\n * @param err - Error\n *\n * @return Mapped error\n */\nexport function translate(err: AWSError): AWSError {\n  switch (err.code) {\n\n    /* JSON parsing failed */\n    case \"SyntaxError\":\n      err.code = \"TypeError\"\n      err.message = \"Invalid request\"\n      return err\n\n    /* Pre-registration check failed */\n    case \"UserLambdaValidationException\":\n      err.code = \"AliasExistsException\"\n      err.message = err.message.replace(\"PreSignUp failed with error \", \"\")\n      return err\n\n    /* Pass-through all other errors */\n    default:\n      return err\n  }\n}\n\n/**\n * Handler factory function\n *\n * @template TParameters - Callback event path parameter type\n * @template TEvent - Callback event body type\n * @template TResponse - Callback response body type\n *\n * @param schema - Request schema\n * @param cb - Handler callback\n *\n * @return Promise resolving with HTTP response\n */\nexport function handler<\n  TParameters extends {}, TEvent extends {}, TResponse = void\n>(schema: object, cb: HandlerCallback<TParameters, TEvent, TResponse>) {\n  return async (event: APIGatewayProxyEvent):\n    Promise<APIGatewayProxyResult> => {\n    try {\n      const data: TEvent = event.httpMethod === \"POST\"\n        ? JSON.parse(event.body || \"{}\")\n        : {}\n\n      /* Validate request and abort on error */\n      const result = validate(data, schema)\n      if (!result.valid)\n        throw new TypeError(\"Invalid request\")\n\n      /* Execute handler and return response */\n      const { statusCode, headers, body } = {\n        statusCode: undefined,\n        headers: {},\n        body: undefined,\n        ...(await cb({\n          path: event.path,\n          pathParameters: event.pathParameters as TParameters,\n          headers: event.headers,\n          body: data\n        }))\n      }\n      return {\n        statusCode: statusCode || (body ? 200 : 204),\n        headers: { ...headers, \"Access-Control-Allow-Origin\": \"*\" },\n        body: body ? JSON.stringify(body) : \"\"\n      }\n\n      /* Catch errors */\n    } catch (err) {\n      err.code = err.code || err.name\n      err = translate(err)\n      return {\n        statusCode: err.statusCode || 400,\n        body: JSON.stringify({\n          type: err.code,\n          message: err.message.replace(/\\.$/, \"\")\n        }),\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      }\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"40abc8060df79596c11010c4b12dee37aececfaa","contentHash":"0151eefec25aa1794707bedeee6e2c911e9c400fb440eed87bba7ff762f75a3c"}}